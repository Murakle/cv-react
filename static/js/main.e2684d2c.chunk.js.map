{"version":3,"sources":["components/DoughnutChart.js","components/TimeLineChart.js","App.js","index.js"],"names":["DoughnutChart","props","chartRef","React","createRef","data","labels","datasets","label","backgroundColor","hoverBackgroundColor","borderColor","state","error","isLoaded","tooltipEl","Chart","register","registerables","myChartRef","this","current","getContext","axios","request","method","url","then","res","result","setState","languages","map","lang","slice","amount","type","options","cutout","responsive","maintainceAspectRatio","borderWidth","borderRadius","borderAlign","plugins","tooltip","enabled","external","tooltipModel","document","getElementById","parent","querySelector","opacity","createElement","id","innerHTML","appendChild","body","dataPoints","parsed","sum","dataset","forEach","item","percent","Math","floor","color","dataIndex","style","marginTop","chart","chartArea","top","radius","element","innerRadius","width","margin","height","labelColors","position","pointerEvents","console","log","message","CircularProgress","className","ref","Component","TimeLineChart","series","name","x","y","Date","getTime","fillColor","toolbar","show","offsetY","parentHeightOffset","plotOptions","bar","horizontal","barHeight","rangeBarGroupRows","xaxis","min","setFullYear","getFullYear","max","annotations","yAxisIndex","text","background","legend","dataLabels","textAnchor","formatter","value","seriesIndex","dataPointIndex","w","config","colors","opts","fill","gradient","shadeIntensity","opacityFrom","opacityTo","stops","custom","display","maxWidth","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e2684d2c.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport \"./DoughnutChart.css\";\nimport {Chart, registerables} from 'chart.js';\nimport axios from 'axios';\nimport { CircularProgress } from '@material-ui/core';\n\n\nexport default class DoughnutChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            tooltipEl: null,\n        };\n    }\n\n    chartRef = React.createRef();\n    data = {\n        labels: [\"Java\", \"HTML/CSS\", \"JS\", \"C/C++\", \"C#\", \"Python/Jupiter\", \"Other\"],\n        datasets: [\n            {\n                label: \"Lines of code\",\n                data: [5000, 4000, 1230, 2000, 3000, 1000, 2200],\n                backgroundColor: [\n                    \"rgba(255, 99, 132, 0.4)\",\n                    \"rgba(54, 162, 235, 0.4)\",\n                    \"rgba(255, 206, 86, 0.4)\",\n                    \"rgba(75, 192, 192, 0.4)\",\n                    \"rgba(153, 102, 255, 0.4)\",\n                    \"rgba(255, 159, 64, 0.4)\",\n                    \"rgba(0, 0, 0, 0.4)\",\n                ],\n                hoverBackgroundColor: [\n                    \"rgba(255, 99, 132, 0.6)\",\n                    \"rgba(54, 162, 235, 0.6)\",\n                    \"rgba(255, 206, 86, 0.6)\",\n                    \"rgba(75, 192, 192, 0.6)\",\n                    \"rgba(153, 102, 255, 0.6)\",\n                    \"rgba(255, 159, 64, 0.6)\",\n                    \"rgba(0, 0, 0, 0.5)\",\n                ],\n                borderColor: [\n                    \"rgba(255, 99, 132, 1)\",\n                    \"rgba(54, 162, 235, 1)\",\n                    \"rgba(255, 206, 86, 1)\",\n                    \"rgba(75, 192, 192, 1)\",\n                    \"rgba(153, 102, 255, 1)\",\n                    \"rgba(255, 159, 64, 1)\",\n                    \"rgba(0, 0, 0, 1)\",\n                ],\n                // circumference: 180,\n            },\n        ],\n    };\n\n    componentDidMount() {\n        // console.log(this);\n        Chart.register(...registerables);\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        const options = {\n            method: \"GET\",\n            url: \"http://46.173.214.190/cv/git-stats-ready\",\n            // url: \"https://cv-sails.herokuapp.com/cv/git-stats-ready\",\n        }\n        axios.request(options)\n            .then(res => res.data)\n            .then(\n                (result) => {\n\n                    this.setState({isLoaded: true});\n                    const languages = result;\n                    const amountOfLanguages = 6;\n                    // TODO \"other\" label\n                    this.data.labels = languages.map(lang => lang.lang).slice(0, amountOfLanguages);\n                    this.data.datasets[0].data = languages.map(lang => lang.amount).slice(0, amountOfLanguages);\n                    new Chart(myChartRef, {\n                        type: 'doughnut',\n                        data: this.data,\n                        options: {\n                            cutout: '110',\n                            responsive: true,\n                            maintainceAspectRatio: false,\n                            borderWidth: 2,\n                            borderRadius: 15,\n                            borderAlign: 'outer',\n                            // offset: 1,\n                            plugins: {\n                                tooltip: {\n                                    enabled: false,\n                                    external: function (tooltipModel) {\n                                        // Tooltip Element\n\n                                        let tooltipEl = document.getElementById('chartjs-tooltip');\n\n                                        // Create element on first render\n                                        const parent = document.querySelector(\".doughnut-chart-container\");\n                                        if (tooltipModel.tooltip.opacity === 0) {\n                                            tooltipEl.style.opacity = '0';\n                                            return;\n                                        }\n                                        if (!parent)\n                                            return;\n                                        if (!tooltipEl) {\n                                            tooltipEl = document.createElement('div');\n                                            tooltipEl.id = 'chartjs-tooltip';\n                                            tooltipEl.innerHTML = '<div></div>';\n                                            parent.appendChild(tooltipEl);\n                                        }\n\n\n                                        if (tooltipModel.tooltip.body[0]) {\n                                            const lang = tooltipModel.tooltip.dataPoints[0].label;\n                                            const amount = tooltipModel.tooltip.dataPoints[0].parsed;\n                                            let sum = 0;\n                                            tooltipModel.tooltip.dataPoints[0].dataset.data.forEach(item => sum += item);\n                                            const percent = Math.floor(amount / sum * 100);\n                                            tooltipEl.innerHTML = `<h3>${lang}</h3>\\n<p class=\"tooltip-percent\">${percent} %</p>\\n<p class=\"tooltip-amount\">${amount} Bytes</p>\\n`;\n                                        }\n\n                                        // console.log(tooltipModel.tooltip);\n                                        // console.log(tooltipModel.tooltip.labelColors[0].hoverB);\n                                        const color = tooltipModel.tooltip.dataPoints[0].dataset.hoverBackgroundColor[tooltipModel.tooltip.dataPoints[0].dataIndex];\n                                        tooltipEl.style.backgroundColor = color + '';\n                                        // getHoverColor()\n                                        // tooltipEl.style.position = 'relative';\n\n                                        tooltipEl.style.marginTop = tooltipModel.chart.chartArea.top + 'px';\n\n                                        const radius = tooltipModel.tooltip.dataPoints[0].element.innerRadius;\n                                        const margin = 10;\n                                        tooltipEl.style.width = (radius * 2 - margin * 2) + 'px';\n                                        tooltipEl.style.height = (radius * 2 - margin * 2) + 'px';\n                                        tooltipEl.style.borderRadius = '50%';\n                                        tooltipEl.style.borderColor = tooltipModel.tooltip.labelColors[0].borderColor + '';\n                                        tooltipEl.style.opacity = '1';\n                                        tooltipEl.style.position = 'absolute';\n                                        tooltipEl.style.pointerEvents = 'none';\n                                        // this._chart.canvas\n\n                                    }\n                                }\n                            }\n\n                        }\n                    });\n                },\n\n                (error) => {\n                    console.log(error);\n                    this.setState({isLoaded: true});\n                    this.setState({error: error});\n                }\n            );\n\n    }\n\n    render() {\n\n        const message = this.state.error ? <h3>Error: {this.state.error.message}</h3> : (\n            !this.state.isLoaded ? <h3>Загрузка...<CircularProgress/></h3> : <h3>Git stats</h3>);\n        return (\n            <div>\n                {message}\n                <CircularProgress/>\n                <div className=\"doughnut-chart-container\">\n                    <canvas\n                        id=\"myChart\"\n                        ref={this.chartRef}\n                    />\n                </div>\n            </div>\n        );\n\n    }\n}\n","import React, {Component} from \"react\";\nimport \"./TimeLineChart.css\";\nimport Chart from \"react-apexcharts\";\n\n\nexport default class TimeLineChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            series: [\n\n                // School\n                {\n                    name: 'School',\n                    data: [\n                        {\n                            x: 'Edu',\n                            y: [\n                                new Date(2007, 8, 1).getTime(),\n                                new Date(2018, 5, 31).getTime()\n                            ]\n                        },\n                    ]\n                },\n                // Uni\n                {\n                    name: 'University',\n                    data: [\n                        {\n                            x: 'Edu',\n                            y: [\n                                new Date(2018, 6, 15).getTime(),\n                                new Date(2019, 6, 15).getTime()\n                            ],\n                            fillColor: '#386641'\n                        },\n                        {\n                            x: 'Edu',\n                            y: [\n                                new Date(2019, 6, 15).getTime(),\n                                new Date(2020, 6, 15).getTime()\n                            ],\n                            fillColor: '#6A994E'\n                        },\n                        {\n                            x: 'Edu',\n                            y: [\n                                new Date(2020, 6, 15).getTime(),\n                                new Date(2021, 6, 15).getTime()\n                            ],\n                            fillColor: '#A7C957'\n                        },\n                        {\n                            x: 'Edu',\n                            y: [\n                                new Date(2021, 6, 15).getTime(),\n                                new Date(2022, 6, 15).getTime()\n                            ],\n                            fillColor: '#F2E8CF'\n                        },\n                    ]\n                },\n                // sahih\n                {\n                    name: 'Sahih Invest',\n                    data: [\n                        {\n                            x: 'Work',\n                            y: [\n                                new Date(2021, 2, 1).getTime(),\n                                new Date(2023, 2, 1).getTime()\n                            ]\n                        },\n                    ]\n                },\n            ],\n            options: {\n                chart: {\n                    type: 'rangeBar',\n                    toolbar: {\n                        show: false\n                    },\n                    offsetY: 0,\n                    parentHeightOffset: 0\n                },\n                plotOptions: {\n                    bar: {\n                        horizontal: true,\n                        barHeight: '66%',\n                        rangeBarGroupRows: true\n                    }\n                },\n                xaxis: {\n                    type: 'datetime',\n                    min: new Date(new Date().setFullYear(new Date().getFullYear() - 4)).getTime(),\n                    max: new Date(new Date().setFullYear(new Date().getFullYear() + 2)).getTime()\n                },\n                annotations: {\n                    position: 'front',\n                    xaxis: [{\n                        x: new Date().getTime(),\n                        borderColor: '#999',\n                        yAxisIndex: 0,\n                        label: {\n                            show: true,\n                            text: 'Now',\n                            style: {\n                                color: \"#fff\",\n                                background: '#BC4749'\n                            }\n                        }\n                    }]\n                },\n                legend: {\n                    position: 'top'\n                },\n                dataLabels: {\n                    enabled: true,\n                    textAnchor: 'end',\n                    formatter: function (value, {seriesIndex, dataPointIndex, w}) {\n                        if (w.config.series[seriesIndex].name === 'University') {\n                            switch (dataPointIndex) {\n                                case 0:\n                                    return '1st year';\n                                case 1:\n                                    return '2nd year';\n                                case 2:\n                                    return '3rd year';\n                                case 3:\n                                    return '4th year';\n                                default:\n                                    return 'xth year';\n                            }\n                        }\n                        return w.config.series[seriesIndex].name;\n                    },\n                    style: {\n                        colors: ['#FFF', function (opts) {\n                            const colors = ['#F2E8CF', '#A7C957', '#6A994E', '#386641'];\n                            return colors[opts.dataPointIndex];\n                        }, \"#FFF\"]\n                    },\n                },\n                fill: {\n                    type: ['solid', 'solid', 'gradient'],\n                    gradient: {\n                        shadeIntensity: 0,\n                        opacityFrom: 1,\n                        opacityTo: 0,\n                        stops: [0, 100]\n                    }\n                },\n                tooltip: {\n                    enabled: true,\n                    custom: function({series, seriesIndex, dataPointIndex, w}) {\n                        return '<div class=\"arrow_box\">' +\n                            '<span>' + w.config.series[seriesIndex].name + '</span>' +\n                            '</div>'\n                    }\n                }\n            }\n        }\n    }\n\n    componentDidMount() {\n\n    }\n\n    render() {\n\n        return (\n            <div style={{display: 'flex', maxWidth: 900}}>\n                <Chart\n                    options={this.state.options}\n                    series={this.state.series}\n                    type=\"rangeBar\"\n                    width=\"100%\"\n                    height=\"150\"\n                />\n            </div>\n        );\n\n    }\n}\n","import \"./App.css\";\nimport DoughnutChart from \"./components/DoughnutChart\";\nimport TimeLineChart from \"./components/TimeLineChart\";\n\nconst App = () => {\n    return (\n        <div>\n            <DoughnutChart/>\n            <TimeLineChart/>\n        </div>\n    );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./static/css/fonts.css\";\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}