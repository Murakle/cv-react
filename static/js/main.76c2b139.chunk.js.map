{"version":3,"sources":["components/DoughnutChart.js","App.js","index.js"],"names":["DoughnutChart","props","chartRef","React","createRef","data","labels","datasets","label","backgroundColor","hoverBackgroundColor","borderColor","state","error","isLoaded","tooltipEl","Chart","register","registerables","myChartRef","this","current","getContext","axios","request","method","url","then","res","result","setState","languages","map","lang","slice","amount","type","options","cutout","responsive","maintainceAspectRatio","borderWidth","borderRadius","borderAlign","plugins","tooltip","enabled","external","tooltipModel","document","getElementById","parent","querySelector","opacity","createElement","id","innerHTML","appendChild","body","dataPoints","parsed","sum","dataset","forEach","item","console","log","percent","Math","floor","innerHtml","color","dataIndex","style","marginTop","chart","chartArea","top","radius","element","innerRadius","width","margin","height","labelColors","position","pointerEvents","message","className","ref","Component","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.76c2b139.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport \"./DoughnutChart.css\";\nimport {Chart, registerables} from 'chart.js';\nimport axios from 'axios';\nimport {getHoverColor} from \"chart.js/helpers\";\n\n\nexport default class DoughnutChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            tooltipEl: null,\n        };\n    }\n\n    chartRef = React.createRef();\n    data = {\n        labels: [\"Java\", \"HTML/CSS\", \"JS\", \"C/C++\", \"C#\", \"Python/Jupiter\", \"Other\"],\n        datasets: [\n            {\n                label: \"Lines of code\",\n                data: [5000, 4000, 1230, 2000, 3000, 1000, 2200],\n                backgroundColor: [\n                    \"rgba(255, 99, 132, 0.4)\",\n                    \"rgba(54, 162, 235, 0.4)\",\n                    \"rgba(255, 206, 86, 0.4)\",\n                    \"rgba(75, 192, 192, 0.4)\",\n                    \"rgba(153, 102, 255, 0.4)\",\n                    \"rgba(255, 159, 64, 0.4)\",\n                    \"rgba(0, 0, 0, 0.4)\",\n                ],\n                hoverBackgroundColor: [\n                    \"rgba(255, 99, 132, 0.6)\",\n                    \"rgba(54, 162, 235, 0.6)\",\n                    \"rgba(255, 206, 86, 0.6)\",\n                    \"rgba(75, 192, 192, 0.6)\",\n                    \"rgba(153, 102, 255, 0.6)\",\n                    \"rgba(255, 159, 64, 0.6)\",\n                    \"rgba(0, 0, 0, 0.5)\",\n                ],\n                borderColor: [\n                    \"rgba(255, 99, 132, 1)\",\n                    \"rgba(54, 162, 235, 1)\",\n                    \"rgba(255, 206, 86, 1)\",\n                    \"rgba(75, 192, 192, 1)\",\n                    \"rgba(153, 102, 255, 1)\",\n                    \"rgba(255, 159, 64, 1)\",\n                    \"rgba(0, 0, 0, 1)\",\n                ],\n                // circumference: 180,\n            },\n        ],\n    };\n\n    componentDidMount() {\n        // console.log(this);\n        Chart.register(...registerables);\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        const options = {\n            method: \"GET\",\n            url: \"http://localhost:1337/cv/git-stats-ready\"\n        }\n        axios.request(options)\n            .then(res => res.data)\n            .then(\n                (result) => {\n\n                    this.setState({isLoaded: true});\n                    const languages = result;\n                    const amountOfLanguages = 6;\n                    // TODO \"other\" label\n                    this.data.labels = languages.map(lang => lang.lang).slice(0, amountOfLanguages);\n                    this.data.datasets[0].data = languages.map(lang => lang.amount).slice(0, amountOfLanguages);\n                    new Chart(myChartRef, {\n                        type: 'doughnut',\n                        data: this.data,\n                        options: {\n                            cutout: '110',\n                            responsive: true,\n                            maintainceAspectRatio: false,\n                            borderWidth: 2,\n                            borderRadius: 15,\n                            borderAlign: 'outer',\n                            // offset: 1,\n                            plugins: {\n                                tooltip: {\n                                    enabled: false,\n                                    external: function (tooltipModel) {\n                                        // Tooltip Element\n\n                                        let tooltipEl = document.getElementById('chartjs-tooltip');\n\n                                        // Create element on first render\n                                        const parent = document.querySelector(\".doughnut-chart-container\");\n                                        if (tooltipModel.tooltip.opacity === 0) {\n                                            tooltipEl.style.opacity = '0';\n                                            return;\n                                        }\n                                        if (!parent)\n                                            return;\n                                        if (!tooltipEl) {\n                                            tooltipEl = document.createElement('div');\n                                            tooltipEl.id = 'chartjs-tooltip';\n                                            tooltipEl.innerHTML = '<div></div>';\n                                            parent.appendChild(tooltipEl);\n                                        }\n\n\n                                        if (tooltipModel.tooltip.body[0]) {\n                                            const lang = tooltipModel.tooltip.dataPoints[0].label;\n                                            const amount = tooltipModel.tooltip.dataPoints[0].parsed;\n                                            let sum = 0;\n                                            tooltipModel.tooltip.dataPoints[0].dataset.data.forEach(item => sum += item);\n                                            console.log(amount / sum);\n                                            const percent = Math.floor(amount / sum * 100);\n                                            let innerHtml = `<h3>${lang}</h3>\\n` + `<p class=\"tooltip-percent\">${percent} %</p>\\n` + `<p class=\"tooltip-amount\">${amount} Bytes</p>\\n`;\n                                            tooltipEl.innerHTML = innerHtml;\n                                        }\n\n                                        console.log(tooltipModel.tooltip);\n                                        // console.log(tooltipModel.tooltip.labelColors[0].hoverB);\n                                        const color = tooltipModel.tooltip.dataPoints[0].dataset.hoverBackgroundColor[tooltipModel.tooltip.dataPoints[0].dataIndex];\n                                        tooltipEl.style.backgroundColor = color + '';\n                                        // getHoverColor()\n                                        // tooltipEl.style.position = 'relative';\n\n                                        tooltipEl.style.marginTop = tooltipModel.chart.chartArea.top + 'px';\n\n                                        const radius = tooltipModel.tooltip.dataPoints[0].element.innerRadius;\n                                        const margin = 10;\n                                        tooltipEl.style.width = (radius * 2 - margin * 2) + 'px';\n                                        tooltipEl.style.height = (radius * 2 - margin * 2) + 'px';\n                                        tooltipEl.style.borderRadius = '50%';\n                                        tooltipEl.style.borderColor = tooltipModel.tooltip.labelColors[0].borderColor + '';\n                                        tooltipEl.style.opacity = '1';\n                                        tooltipEl.style.position = 'absolute';\n                                        tooltipEl.style.pointerEvents = 'none';\n                                        // this._chart.canvas\n\n                                    }\n                                }\n                            }\n\n                        }\n                    });\n                },\n\n                (error) => {\n                    console.log(error);\n                    this.setState({isLoaded: true});\n                    this.setState({error: error});\n                }\n            );\n\n    }\n\n    render() {\n\n        const message = this.state.error ? <h3>Error: {this.state.error.message}</h3> : (\n            !this.state.isLoaded ? <h3>Загрузка...</h3> : <h3>Git stats</h3>);\n        return (\n            <div>\n                {message}\n                <div className=\"doughnut-chart-container\">\n                    <canvas\n                        id=\"myChart\"\n                        ref={this.chartRef}\n                    />\n                </div>\n            </div>\n        );\n\n    }\n}\n","import \"./App.css\";\nimport DoughnutChart from \"./components/DoughnutChart\";\n\nconst App = () => {\n    return (\n        <DoughnutChart/>\n    );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}